// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: simpleQuiz.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SimpleQuizServiceClient is the client API for SimpleQuizService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SimpleQuizServiceClient interface {
	NewUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error)
	GetQuestion(ctx context.Context, in *User, opts ...grpc.CallOption) (*Question, error)
	GetAnswer(ctx context.Context, in *Answer, opts ...grpc.CallOption) (*Empty, error)
	GetResult(ctx context.Context, in *User, opts ...grpc.CallOption) (*Result, error)
}

type simpleQuizServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSimpleQuizServiceClient(cc grpc.ClientConnInterface) SimpleQuizServiceClient {
	return &simpleQuizServiceClient{cc}
}

func (c *simpleQuizServiceClient) NewUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/main.SimpleQuizService/newUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleQuizServiceClient) GetQuestion(ctx context.Context, in *User, opts ...grpc.CallOption) (*Question, error) {
	out := new(Question)
	err := c.cc.Invoke(ctx, "/main.SimpleQuizService/GetQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleQuizServiceClient) GetAnswer(ctx context.Context, in *Answer, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/main.SimpleQuizService/GetAnswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleQuizServiceClient) GetResult(ctx context.Context, in *User, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/main.SimpleQuizService/GetResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SimpleQuizServiceServer is the server API for SimpleQuizService service.
// All implementations must embed UnimplementedSimpleQuizServiceServer
// for forward compatibility
type SimpleQuizServiceServer interface {
	NewUser(context.Context, *User) (*Empty, error)
	GetQuestion(context.Context, *User) (*Question, error)
	GetAnswer(context.Context, *Answer) (*Empty, error)
	GetResult(context.Context, *User) (*Result, error)
	mustEmbedUnimplementedSimpleQuizServiceServer()
}

// UnimplementedSimpleQuizServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSimpleQuizServiceServer struct {
}

func (UnimplementedSimpleQuizServiceServer) NewUser(context.Context, *User) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewUser not implemented")
}
func (UnimplementedSimpleQuizServiceServer) GetQuestion(context.Context, *User) (*Question, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestion not implemented")
}
func (UnimplementedSimpleQuizServiceServer) GetAnswer(context.Context, *Answer) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnswer not implemented")
}
func (UnimplementedSimpleQuizServiceServer) GetResult(context.Context, *User) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResult not implemented")
}
func (UnimplementedSimpleQuizServiceServer) mustEmbedUnimplementedSimpleQuizServiceServer() {}

// UnsafeSimpleQuizServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SimpleQuizServiceServer will
// result in compilation errors.
type UnsafeSimpleQuizServiceServer interface {
	mustEmbedUnimplementedSimpleQuizServiceServer()
}

func RegisterSimpleQuizServiceServer(s grpc.ServiceRegistrar, srv SimpleQuizServiceServer) {
	s.RegisterService(&SimpleQuizService_ServiceDesc, srv)
}

func _SimpleQuizService_NewUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleQuizServiceServer).NewUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.SimpleQuizService/newUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleQuizServiceServer).NewUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleQuizService_GetQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleQuizServiceServer).GetQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.SimpleQuizService/GetQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleQuizServiceServer).GetQuestion(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleQuizService_GetAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Answer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleQuizServiceServer).GetAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.SimpleQuizService/GetAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleQuizServiceServer).GetAnswer(ctx, req.(*Answer))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleQuizService_GetResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleQuizServiceServer).GetResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.SimpleQuizService/GetResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleQuizServiceServer).GetResult(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

// SimpleQuizService_ServiceDesc is the grpc.ServiceDesc for SimpleQuizService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SimpleQuizService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.SimpleQuizService",
	HandlerType: (*SimpleQuizServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "newUser",
			Handler:    _SimpleQuizService_NewUser_Handler,
		},
		{
			MethodName: "GetQuestion",
			Handler:    _SimpleQuizService_GetQuestion_Handler,
		},
		{
			MethodName: "GetAnswer",
			Handler:    _SimpleQuizService_GetAnswer_Handler,
		},
		{
			MethodName: "GetResult",
			Handler:    _SimpleQuizService_GetResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "simpleQuiz.proto",
}
